<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.firasesbai.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.firasesbai.com/" rel="alternate" type="text/html" /><updated>2025-10-26T21:39:20+00:00</updated><id>https://www.firasesbai.com/feed.xml</id><title type="html">Firas Esbai</title><subtitle>The Blog and Portfolio of Firas Esbai.
</subtitle><author><name>Firas Esbai</name></author><entry><title type="html">Serverless Architecture for Data Engineering</title><link href="https://www.firasesbai.com/articles/2025/10/24/serverless-architecture-for-data-engineering.html" rel="alternate" type="text/html" title="Serverless Architecture for Data Engineering" /><published>2025-10-24T00:00:00+00:00</published><updated>2025-10-24T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/10/24/serverless-architecture-for-data-engineering</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/10/24/serverless-architecture-for-data-engineering.html">&lt;p&gt;&lt;em&gt;Understanding serverless architecture in data engineering by example.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Following the AWS Lambda launch in 2014 and the release of Amazon’s API gateway in 2015, “serverless” grew in popularity to become a new buzzword in the industry. Today, many organizations are considering serverless architectures as a way to save costs and operational overhead in building and running their applications.&lt;/p&gt;

&lt;p&gt;But what does it really mean to build with serverless, especially in data engineering? That is what we will try to cover in this article through concrete hands on example.&lt;/p&gt;

&lt;p&gt;All the source code is available &lt;a href=&quot;https://github.com/firasesbai/data-engineering-examples/tree/main/nyc-taxi-etl-pipeline&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So let’s get started!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-serverless&quot; id=&quot;markdown-toc-what-is-serverless&quot;&gt;What is Serverless?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#simplified-workflow-example&quot; id=&quot;markdown-toc-simplified-workflow-example&quot;&gt;Simplified Workflow Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-and-software-design&quot; id=&quot;markdown-toc-serverless-and-software-design&quot;&gt;Serverless and Software Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges-and-limitations&quot; id=&quot;markdown-toc-challenges-and-limitations&quot;&gt;Challenges and Limitations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-choose&quot; id=&quot;markdown-toc-how-to-choose&quot;&gt;How to Choose?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;what-is-serverless&quot;&gt;What is Serverless?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/serverless/&quot;&gt;According to AWS&lt;/a&gt;, serverless computing is a set of “technologies for running code, managing data, and integrating applications, all without managing servers.”&lt;/p&gt;

&lt;p&gt;To elaborate, let’s first differentiate serverless offerings from fully-managed services where some server configuration is required. A good example would be &lt;a href=&quot;https://aws.amazon.com/rds/aurora/&quot;&gt;Amazon Aurora&lt;/a&gt; which offers two modes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Provisioned&lt;/strong&gt;: a managed “instance-based” model where the instance size is configured by the developer and the cost model is usually a fixed hourly rate.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: no servers are configured by the developer. The database scales automatically and the cost model is pay-per-use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core principles of a true serverless architecture are &lt;strong&gt;no server management&lt;/strong&gt; and a &lt;strong&gt;pay-for-value&lt;/strong&gt; cost model.&lt;/p&gt;

&lt;h2 id=&quot;simplified-workflow-example&quot;&gt;Simplified Workflow Example&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/firasesbai/data-engineering-examples/tree/main/nyc-taxi-etl-pipeline&quot;&gt;repository&lt;/a&gt; contains an example of an ETL pipeline for processing NYC Taxi Trip data using AWS services. The goal is to ingest raw CSV data, transform it into a clean, query-ready format, and make it available for analysis. The entire architecture is built on a foundation of serverless AWS services.&lt;/p&gt;

&lt;p&gt;The entire infrastructure is defined as code using the &lt;a href=&quot;https://docs.aws.amazon.com/cdk/v2/guide/home.html&quot;&gt;AWS CDK&lt;/a&gt; making the deployment of the whole stack straightforward with a single command.&lt;/p&gt;

&lt;p&gt;The solution implements the following architecture workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Data Ingestion (Amazon S3):&lt;/strong&gt; Raw CSV files land in an S3 bucket. S3 acts as our scalable, serverless data lake.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Orchestration (Amazon EventBridge &amp;amp; AWS Lambda):&lt;/strong&gt; An Amazon EventBridge rule, a serverless cron job, kicks off the pipeline on a schedule (e.g., daily at 4 AM UTC). The rule triggers a Lambda function which in return starts the main ETL job with the correct parameters.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ETL Processing (AWS Glue):&lt;/strong&gt; The Lambda starts an AWS Glue job, which is the core of our pipeline. Glue is a serverless ETL service that automatically provisions compute resources to run our transformation script, and then shuts them down immediately after.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Cataloging (AWS Glue Crawler):&lt;/strong&gt; After the job completes, a Glue Crawler inspects the processed data (now in optimized Parquet format), infers its schema, and updates the AWS Glue Data Catalog.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Querying (Amazon Athena):&lt;/strong&gt; With the metadata available in the catalog, anyone can query the processed data in S3 using standard SQL with Athena, a serverless query engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;serverless-and-software-design&quot;&gt;Serverless and Software Design&lt;/h2&gt;

&lt;p&gt;Can you imagine a technology that lets you build automatically scaling, highly available software while optimizing for costs? This is the serverless proposition. But its real value is strategic, profoundly impacting how we approach software design. Specifically, how can you make any choices about your architecture, if your future use-cases aren’t known?&lt;/p&gt;

&lt;p&gt;When you don’t know the future, a  &lt;a href=&quot;https://martinfowler.com/bliki/SacrificialArchitecture.html&quot;&gt;sacrificial architecture&lt;/a&gt; is invaluable. Martin Fowler defines sacrificial architecture as an architecture designed to be thrown away if the concept proves successful. In our context, cloud environments and especially serverless offerings make sacrificial architecture more attractive in order to build a Minimum Viable Product (MVP). Our taxi pipeline is a perfect MVP. We can deploy it quickly, gather feedback, and if requirements change, we can discard it with minimal sunk cost.&lt;/p&gt;

&lt;p&gt;Now the success of a system depends on its ability to evolve. Designing a system isn’t a one-off operation. When the product direction, maturity, business requirements and team topologies change, then the success of a system will depend on its ability to evolve along with its demands. According to Martin Fowler’s foreword of the evolutionary architecture book: “The heart of doing evolutionary architecture is to make small changes, and put in feedback loops that allow everyone to learn from how the system is developing.”&lt;/p&gt;

&lt;p&gt;A conjecture that can help us think about this is the well-known &lt;a href=&quot;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&quot;&gt;design stamina hypothesis&lt;/a&gt;, which stipulates that a system that has not been designed may be easy to develop in the beginning, but after a certain point (the so-called “design pay-off line”), a well-designed system will outperform it.&lt;/p&gt;

&lt;p&gt;As shown in the diagram below, Serverless enables a “&lt;strong&gt;post-MVP redesign&lt;/strong&gt;” strategy. You can start with a simple, serverless-first approach to ship quickly. As you learn and the system matures, you can refactor or redesign parts of the architecture without being locked into the initial design—a perfect example of an evolutionary architecture in practice.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/27_post_mvp_redesign.png&quot; alt=&quot;post mvp redesign cumulative functionality&quot; /&gt;
  &lt;figcaption&gt;Figure 1: Post MVP Redesign Cumulative Functionality&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The post-MVP redesign is comparably fast as the no-design approach delivering a lot of functionality and then shifts to the ideal scenario after redesigning to continuously deliver functionality in the long run.&lt;/p&gt;

&lt;h2 id=&quot;challenges-and-limitations&quot;&gt;Challenges and Limitations&lt;/h2&gt;

&lt;p&gt;That being said, it’s important to be aware of the challenges that come with serverless architectures.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cost Unpredictability:&lt;/strong&gt; Unpredictable cost is a key aspect of serverless architecture that can be also a problem, especially for large enterprises operating on annually approved budgets. Cost unpredictability can make stakeholders reluctant to using a product where costs are mostly variable. For a scheduled workload like our ETL, the cost is quite predictable but that is not always the case and this is where active monitoring becomes a key to keep costs in check.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Platform Limitations:&lt;/strong&gt; Serverless platforms are always evolving. In the past, the &lt;a href=&quot;https://aws.amazon.com/glue/&quot;&gt;AWS Glue&lt;/a&gt; service for example had limitations in terms of runtime choice and memory customization. While many of these have been addressed, it’s a reminder that you are dependent on the provider’s roadmap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Vendor Lock-in:&lt;/strong&gt; Building on a specific cloud provider’s serverless offerings can tightly couple your application to their ecosystem, creating a trade-off between development speed and portability.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-choose&quot;&gt;How to Choose?&lt;/h2&gt;

&lt;p&gt;So, should you go serverless? Consider these questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are you in a greenfield project where you need to iterate quickly and flexibly while building an MVP?&lt;/li&gt;
  &lt;li&gt;Do you have a shortage of infrastructure developers in your team? Serverless empowers application developers to manage their own services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you answered yes to any of these, a serverless architecture is a powerful option. It’s not just a technical choice but a strategic one that prioritizes speed, agility, and the ability to evolve with changing business requirements.&lt;/p&gt;

&lt;p&gt;With this we have reached the end of this post, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.datadoghq.com/state-of-serverless/&quot;&gt;https://www.datadoghq.com/state-of-serverless/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/serverless.html&quot;&gt;https://martinfowler.com/articles/serverless.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/serverless-architecture&quot;&gt;https://www.thoughtworks.com/radar/techniques/serverless-architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thoughtworks.com/en-gb/radar/techniques/lambda-pinball&quot;&gt;https://www.thoughtworks.com/en-gb/radar/techniques/lambda-pinball&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/serverless-fully-managed-service-difference/&quot;&gt;https://www.freecodecamp.org/news/serverless-fully-managed-service-difference/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.perficient.com/2021/06/17/aws-cost-analysis-comparing-lambda-ec2-fargate/&quot;&gt;https://blogs.perficient.com/2021/06/17/aws-cost-analysis-comparing-lambda-ec2-fargate/&lt;/a&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><category term="Data Architecture" /><category term="Cloud Computing" /><summary type="html">Understanding serverless architecture in data engineering by example.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/27_post_mvp_redesign.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/27_post_mvp_redesign.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">101 Apache Spark Cheatsheet</title><link href="https://www.firasesbai.com/articles/2025/10/10/apache-spark-101.html" rel="alternate" type="text/html" title="101 Apache Spark Cheatsheet" /><published>2025-10-10T00:00:00+00:00</published><updated>2025-10-10T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/10/10/apache-spark-101</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/10/10/apache-spark-101.html">&lt;p&gt;&lt;em&gt;101 Apache Spark Cheatsheet&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-apache-spark&quot; id=&quot;markdown-toc-what-is-apache-spark&quot;&gt;What is Apache Spark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-features-of-spark&quot; id=&quot;markdown-toc-key-features-of-spark&quot;&gt;Key features of Spark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resilient-distributed-datasets&quot; id=&quot;markdown-toc-resilient-distributed-datasets&quot;&gt;Resilient Distributed Datasets&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#transformations&quot; id=&quot;markdown-toc-transformations&quot;&gt;Transformations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#actions&quot; id=&quot;markdown-toc-actions&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rdd-vs-dataframe&quot; id=&quot;markdown-toc-rdd-vs-dataframe&quot;&gt;RDD vs DataFrame&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fault-tolerance&quot; id=&quot;markdown-toc-fault-tolerance&quot;&gt;Fault Tolerance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spark-architecture&quot; id=&quot;markdown-toc-spark-architecture&quot;&gt;Spark Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spark-components&quot; id=&quot;markdown-toc-spark-components&quot;&gt;Spark Components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lazy-evaluation&quot; id=&quot;markdown-toc-lazy-evaluation&quot;&gt;Lazy Evaluation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dag-in-spark&quot; id=&quot;markdown-toc-dag-in-spark&quot;&gt;DAG in Spark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#caching&quot; id=&quot;markdown-toc-caching&quot;&gt;Caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#broadcast-variables&quot; id=&quot;markdown-toc-broadcast-variables&quot;&gt;Broadcast Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#partitioning&quot; id=&quot;markdown-toc-partitioning&quot;&gt;Partitioning&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#storage-partitioning-vs-spark-partitioning&quot; id=&quot;markdown-toc-storage-partitioning-vs-spark-partitioning&quot;&gt;Storage Partitioning vs Spark Partitioning&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spark-applications-optimization&quot; id=&quot;markdown-toc-spark-applications-optimization&quot;&gt;Spark Applications Optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;what-is-apache-spark&quot;&gt;What is Apache Spark&lt;/h2&gt;

&lt;p&gt;Apache Spark is an open-source, distributed computing system designed for fast and general-purpose data processing. It was developed to address the limitations of Hadoop MapReduce, offering significant performance improvements and a more flexible programming model.&lt;/p&gt;

&lt;h2 id=&quot;key-features-of-spark&quot;&gt;Key features of Spark&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: Spark can be up to 100 times faster than Hadoop MapReduce for certain workloads, primarily due to its in-memory processing capabilities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ease of Use&lt;/strong&gt;: Spark provides high-level APIs in Java, Scala, Python, and R, making it accessible to a wide range of developers and data scientists.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unified Engine&lt;/strong&gt;: Spark can handle diverse workloads including batch processing, interactive queries, streaming, machine learning, and graph processing, all within the same engine.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;: Spark achieves fault tolerance through the use of Resilient Distributed Datasets (RDDs) and their lineage information.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Spark can scale from one to thousands of nodes, allowing for efficient processing of large datasets.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: Spark can run in various environments, including Hadoop, Mesos, standalone, or in the cloud and it can access diverse data sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resilient-distributed-datasets&quot;&gt;Resilient Distributed Datasets&lt;/h2&gt;

&lt;p&gt;Resilient Distributed Datasets (RDD) is the fundamental data structure in Apache Spark.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resilient&lt;/strong&gt;: RDDs are fault-tolerant. If a partition of an RDD is lost due to node failure, it can be reconstructed using the lineage information.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Distributed&lt;/strong&gt;: Data in RDDs is divided into partitions and distributed across nodes in a cluster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Immutable&lt;/strong&gt;: Once created, RDDs cannot be modified. Any transformation on an RDD creates a new RDD.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lazy Evaluation&lt;/strong&gt;: Transformations on RDDs are lazily evaluated. They are not computed until an action is called.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In-memory Computation&lt;/strong&gt;: RDDs can be cached in memory for faster access in iterative algorithms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RDDs support two types of operations: &lt;strong&gt;&lt;em&gt;Transformations&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;transformations&quot;&gt;Transformations&lt;/h3&gt;

&lt;p&gt;These are operations that create a new RDD from an existing one and they are lazy (not computed immediately).&lt;/p&gt;

&lt;p&gt;Examples of transformations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(func)&lt;/code&gt;: Apply a function to each element in the RDD. The result is an RDD with the same number of elements as the original.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter(func)&lt;/code&gt;: Return a new RDD containing only the elements that pass the filter condition.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap(func)&lt;/code&gt;: Similar to map, but each input item can be mapped to 0 or more output items. The results are flattened into a single RDD.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;groupByKey()&lt;/code&gt;: Group the values for each key in the RDD.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceByKey(func)&lt;/code&gt;: Combine values with the same key using the provided function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; usage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;      
    &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;How are you&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;map_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Result: [[&quot;Hello&quot;, &quot;World&quot;], [&quot;How&quot;, &quot;are&quot;, &quot;you&quot;]]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flatmap_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Result: [&quot;Hello&quot;, &quot;World&quot;, &quot;How&quot;, &quot;are&quot;, &quot;you&quot;]&lt;/span&gt;
   
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt;

&lt;p&gt;These are operations that return a result to the driver program or write data to an external storage system. They trigger the execution of all the transformations that were called before it.&lt;/p&gt;

&lt;p&gt;Examples of actions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect()&lt;/code&gt;: Return all the elements of the RDD as an array to the driver program.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count()&lt;/code&gt;: Return the number of elements in the RDD.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first()&lt;/code&gt;: Return the first element of the RDD.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take(n)&lt;/code&gt;: Return an array with the first n elements of the RDD.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce(func)&lt;/code&gt;: Aggregate the elements of the RDD using a function.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saveAsTextFile(path)&lt;/code&gt;: Save the elements of the RDD as a text file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rdd-vs-dataframe&quot;&gt;RDD vs DataFrame&lt;/h3&gt;

&lt;p&gt;A Spark DataFrame is a distributed collection of data organized into named columns, similar to a table in a relational database or a data frame in R/Python. It’s built on top of RDDs and provides a more user-friendly API for structured and semi-structured data. It uses Catalyst Optimizer, which can significantly improve performance
and has a defined Schema, allowing Spark to optimize query plans.&lt;/p&gt;

&lt;h2 id=&quot;fault-tolerance&quot;&gt;Fault Tolerance&lt;/h2&gt;

&lt;p&gt;Spark achieves fault tolerance primarily through the lineage of RDDs and the ability to recompute lost data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RDD Lineage&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Each RDD maintains information about its lineage (how it was derived from other datasets).&lt;/li&gt;
      &lt;li&gt;If a partition of an RDD is lost, Spark can rebuild it using this lineage information.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checkpointing&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;For long lineage chains, Spark allows saving intermediate results to reliable storage (like HDFS).&lt;/li&gt;
      &lt;li&gt;This reduces recovery time in case of failures.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speculative Execution&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Spark can run multiple copies of slower tasks to reduce the impact of stragglers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stage Retry&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;If a task fails, Spark will retry it on a different executor.&lt;/li&gt;
      &lt;li&gt;If a whole stage fails, Spark can resubmit the entire stage.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Replication&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;When caching data, Spark can replicate it across nodes for added resilience.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Driver and Worker Fault Tolerance&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Spark can recover from worker node failures.&lt;/li&gt;
      &lt;li&gt;For driver failures, Spark supports checkpointing of the driver’s state in some deployment modes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spark-architecture&quot;&gt;Spark Architecture&lt;/h2&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/26_spark_architecture.png&quot; alt=&quot;Spark Architecture&quot; /&gt;
  &lt;figcaption&gt;Figure 1: Spark Architecture - &lt;a href=&quot;https://spark.apache.org/docs/latest/cluster-overview.html&quot;&gt;Image Source&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Driver Program&lt;/strong&gt;: Contains the main() function and creates a SparkContext.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SparkContext&lt;/strong&gt;: The entry point for Spark functionality, representing the connection to the Spark cluster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cluster Manager&lt;/strong&gt;: Allocates resources across applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Worker Nodes (Slaves)&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Execute the tasks assigned by the driver.&lt;/li&gt;
      &lt;li&gt;Store data partitions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Executor&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A process launched for an application on a worker node, that runs tasks and keeps data in memory or disk storage across them.&lt;/li&gt;
      &lt;li&gt;Each application gets its own executor processes, which stay up for the duration of the whole application and run tasks in multiple threads. This has the benefit of isolating applications from each other, on both the scheduling side (each driver schedules its own tasks) and executor side (tasks from different applications run in different JVMs). However, it also means that data cannot be shared across different Spark applications (instances of SparkContext) without writing it to an external storage system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt;: A unit of work that will be sent to one executor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Job&lt;/strong&gt;: A parallel computation consisting of multiple tasks that gets spawned in response to a Spark action.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stage&lt;/strong&gt;: Each job gets divided into smaller sets of tasks called stages that depend on each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spark-components&quot;&gt;Spark Components&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Spark Core&lt;/strong&gt;: The foundation of the entire Spark system, providing distributed task dispatching, scheduling, and basic I/O functionalities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spark SQL&lt;/strong&gt;: Module for working with structured data. It allows querying data via SQL as well as the Hive Query Language (HQL) and supports various sources like Hive tables, Parquet, and JSON.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spark Streaming&lt;/strong&gt;: Enables processing of live streams of data. It provides a high-level abstraction called DStream (discretized stream).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MLlib (Machine Learning Library)&lt;/strong&gt;: A distributed machine learning framework on top of Spark Core. It provides various utilities for machine learning tasks, including classification, regression, clustering, and collaborative filtering.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GraphX&lt;/strong&gt;: A distributed graph-processing framework on top of Spark. It provides an API for expressing graph computation and can model user-defined graphs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SparkR&lt;/strong&gt;: An R package that provides a light-weight frontend to use Spark from R.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lazy-evaluation&quot;&gt;Lazy Evaluation&lt;/h2&gt;

&lt;p&gt;Lazy evaluation is a key optimization technique used in Spark. When you apply a transformation on an RDD, Spark doesn’t compute the results immediately. Instead, it remembers the set of transformations applied to some base dataset. The transformations are only computed when an action requires a result to be returned to the driver program.&lt;/p&gt;

&lt;p&gt;Importance of lazy evaluation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Optimization&lt;/strong&gt;: Spark can optimize the execution plan by analyzing the full set of transformations before executing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;: It reduces the number of passes over the data by grouping operations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduced Computation&lt;/strong&gt;: If the final action only needs to compute a small result, Spark can minimize the amount of data processed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;: Lazy evaluation allows Spark to reconstruct lost data by recomputing only the lost partitions from the original data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dag-in-spark&quot;&gt;DAG in Spark&lt;/h2&gt;

&lt;p&gt;In Spark, a Directed Acyclic Graph (DAG) is a conceptual model of the execution plan for a set of operations on RDDs.&lt;/p&gt;

&lt;p&gt;A DAG is a graph where each node represents an RDD partition, and the edges represent the operations to be performed on the RDD. The edges have a direction, indicating the flow of data from one operation to the next. There are no cycles in the graph, meaning the operations flow in one direction and don’t loop back.&lt;/p&gt;

&lt;p&gt;Spark’s DAG scheduler optimizes the execution plan by analyzing the graph and combining operations where possible. The DAG is divided into stages. A stage is a set of tasks that can be executed together without shuffling data. If a node fails, Spark can reconstruct the lost partitions using the lineage information stored in the DAG.&lt;/p&gt;

&lt;p&gt;The DAG is constructed when actions are called, not when transformations are defined.&lt;/p&gt;

&lt;h2 id=&quot;caching&quot;&gt;Caching&lt;/h2&gt;

&lt;p&gt;Caching in Spark is a technique used to store the intermediate results of RDD computations in memory or disk. This allows faster access when the same RDD is used multiple times.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Methods&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache()&lt;/code&gt;: Stores the RDD in memory.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;persist()&lt;/code&gt;: Allows specifying the storage level (memory, disk, or both).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage Levels&lt;/strong&gt;: Spark provides different storage levels like MEMORY_ONLY, MEMORY_AND_DISK, DISK_ONLY, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lazy Evaluation&lt;/strong&gt;: Caching is also lazily evaluated. The RDD isn’t cached until the first action that uses it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automatic Memory Management&lt;/strong&gt;: Spark automatically manages the cached data using LRU (Least Recently Used) eviction policy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unpersist&lt;/strong&gt;: You can manually remove cached data using the unpersist() method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;broadcast-variables&quot;&gt;Broadcast Variables&lt;/h2&gt;

&lt;p&gt;Broadcast variables in Spark are read-only variables that are cached on each machine in the cluster rather than shipped with every task. They are used to efficiently share large read-only data across all nodes in a cluster. They are commonly used for lookup tables, machine learning models, or any large read-only data structure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;      
    &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unknown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;partitioning&quot;&gt;Partitioning&lt;/h2&gt;

&lt;p&gt;Spark automatically partitions RDDs based on the input data source or the number of cores available. There are three types of partitioning:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Hash Partitioning&lt;/em&gt;: Based on the hash code of the key.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Range Partitioning&lt;/em&gt;: Based on ordered keys.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Custom Partitioning&lt;/em&gt;: User-defined partitioning logic using methods like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repartition()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coalesce()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partitioning is important because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It affects the level of parallelism in data processing&lt;/li&gt;
  &lt;li&gt;It influences the amount of data transfer during shuffles&lt;/li&gt;
  &lt;li&gt;It impacts the efficiency of certain operations (e.g., joins, aggregations)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;storage-partitioning-vs-spark-partitioning&quot;&gt;Storage Partitioning vs Spark Partitioning&lt;/h3&gt;

&lt;p&gt;These are two separate concepts, but understanding the difference is relevant as storage partitioning can impact Spark’s performance.&lt;/p&gt;

&lt;p&gt;While storage partitioning refers to how data is organized on disk (e.g. in S3 or HDFS), Spark partitioning is about how data is distributed across executors for processing.&lt;/p&gt;

&lt;p&gt;Storage partitioning allows partition pruning; Spark can skip reading irrelevant partitions based on query filters which leads to faster query processing times by reducing data scanned.&lt;/p&gt;

&lt;p&gt;In order to read partitioned data, Spark performs partition discovery to identify partitions based on directory structure. It can also leverage partition information for optimizations like partition pruning. However, Spark still creates its own internal partitions for processing, which may differ from storage partitions.&lt;/p&gt;

&lt;h2 id=&quot;spark-applications-optimization&quot;&gt;Spark Applications Optimization&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Data Serialization&lt;/strong&gt;: Use Kryo serialization instead of Java serialization for better performance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Proper Data Partitioning&lt;/strong&gt;: Ensure data is well-distributed across partitions to avoid skew.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Caching and Persistence&lt;/strong&gt;: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;persist()&lt;/code&gt; for RDDs used multiple times.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Shuffling&lt;/strong&gt;: Minimize operations that cause data shuffling (e.g., groupByKey, reduceByKey).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Broadcast Variables&lt;/strong&gt;: For large shared data that needs to be distributed to all nodes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optimize Data Formats&lt;/strong&gt;: Use columnar formats like Parquet for better compression and query performance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tune Spark Configurations&lt;/strong&gt;: Adjust executor memory, number of executors, and other Spark parameters.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Appropriate Join Strategies&lt;/strong&gt;: Choose the right join strategy (broadcast joins for small-large table joins).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid UDFs When Possible&lt;/strong&gt;: Use built-in functions instead of User Defined Functions for better performance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Monitor and Profile&lt;/strong&gt;: Use Spark UI and other profiling tools to identify bottlenecks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><summary type="html">101 Apache Spark Cheatsheet</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/26_spark_architecture.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/26_spark_architecture.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Learnings from Vibe Coding</title><link href="https://www.firasesbai.com/articles/2025/09/25/vibe-coding-learnings.html" rel="alternate" type="text/html" title="Learnings from Vibe Coding" /><published>2025-09-25T00:00:00+00:00</published><updated>2025-09-25T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/09/25/vibe-coding-learnings</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/09/25/vibe-coding-learnings.html">&lt;p&gt;&lt;em&gt;In this article, I share some lessons learned from trying out vibe coding.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-vibe-coding&quot; id=&quot;markdown-toc-what-is-vibe-coding&quot;&gt;What is Vibe Coding?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#expectations&quot; id=&quot;markdown-toc-expectations&quot;&gt;Expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-takeaways&quot; id=&quot;markdown-toc-key-takeaways&quot;&gt;Key Takeaways&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recap&quot; id=&quot;markdown-toc-recap&quot;&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;what-is-vibe-coding&quot;&gt;What is Vibe Coding?&lt;/h2&gt;

&lt;p&gt;Vibe coding is a term coined by Andrej Karpathy in his X post that was shared on February 2, 2025. However, the term has definitely evolved in my opinion since the original description. It is indeed a new kind of coding where the developer has become more like a moderator of multiple chat sessions and agents running in the background resulting in a handful of new and updated files with new generated code by the large language model that are waiting for his review.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/25_vibe_coding_andrej_karpathy_post.png&quot; alt=&quot;Andrej Karpathy X Post&quot; /&gt;
  &lt;figcaption&gt;Figure 1: Andrej Karpathy's Post - &lt;a href=&quot;https://x.com/karpathy/status/1886192184808149383?lang=en&quot;&gt;Image Source&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;expectations&quot;&gt;Expectations&lt;/h2&gt;

&lt;p&gt;This is not gonna be one of those &lt;em&gt;I built a SaaS app in 15 minutes&lt;/em&gt;. It is easy and at times surprisingly good how fast you can generate a landing page for an idea or have a decent CRUD app running but things get more complicated when building complex SaaS.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/25_vibe_coding_leo_post.png&quot; alt=&quot;Leo's posts about Vibe Coding&quot; /&gt;
  &lt;figcaption&gt;Figure 2: Leo's posts about Vibe Coding - &lt;a href=&quot;https://x.com/leojr94_?lang=en&quot;&gt;Image Source&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In my experiment, I wanted to answer a simple question: &lt;em&gt;can AI assisted development make me move faster through the backlog?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Obviously faster does not always mean better and the metric for measuring the outcome should not be the number of lines of code generated because if anything you won’t be disappointed: LLMs can truly quickly generate a lot of code!&lt;/p&gt;

&lt;p&gt;As this was a personal side project, the stakes were not that high but the role of the moderator as mentioned earlier is still of huge importance. As you can see from the diagram below, I dealt with times where the model generated thousands of lines of code but almost always not all of it was accepted. You have to be a gatekeeper protecting your codebase from bugs or introducing weird behaviour and making sure to always follow clear design patterns and software development best practices.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/25_total_line_changes.png&quot; alt=&quot;total line changes from chat&quot; /&gt;
  &lt;figcaption&gt;Figure 3: Total Line Changes from Chat&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So over the course of two weeks, I used &lt;strong&gt;Cursor&lt;/strong&gt; to try to answer my question. I did not start from scratch and vibe coded my way into this project but rather build on top of an existing web application and extended it with new features. That means I already had a clear code structure with clearly defined interfaces and domain models that have greatly influenced the LLM’s code organization and structure.&lt;/p&gt;

&lt;p&gt;When it comes to the features, some of them were straightforward but many weren’t. These were a collection of cards with merely a title in a Trello board that came from ideas I thought were cool to implement someday so I just wrote them down there quickly to not lose track of them. This point is important as we’ll see later because it influences how you approach building these features and how to draft your prompts for that.&lt;/p&gt;

&lt;p&gt;A final thing to mention before moving on to the key takeaways is the distribution of the used programming languages in the project:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/25_programming_language_usage.png&quot; alt=&quot;programming language usage&quot; /&gt;
  &lt;figcaption&gt;Figure 4: Programming Language Usage&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I’m not a frontend developer and my Javascript skills at this point were a bit rusty to say the least but surprisingly this is the part where I made most of the progress that I couldn’t have done without the AI assistance in such a short time.&lt;/p&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;

&lt;p&gt;Following are the observations and notes I took as I progressed in this experiment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use user journeys and expected behaviour in your prompt when explaining a feature especially one that would require changes across both frontend and backend logic.&lt;/li&gt;
  &lt;li&gt;Be specific and start with thin slices. Describing multiple features and expectations in the same prompt just because they are correlated will not result in better results but rather only confuse the model.&lt;/li&gt;
  &lt;li&gt;Request analysis of the code structure and design by giving the whole codebase as context to the mode. This helps you reflect on the progress made so far, assess the list of features implemented and decide what to do next because it is easy to have decision paralysis in this honeymoon phase where you are in love with how productive you are and everything seems feasible that you just want to do it all at once.&lt;/li&gt;
  &lt;li&gt;Asking the model to simplify any implementation is always good: rely on your judgment of assessing what looks good and what looks meh.&lt;/li&gt;
  &lt;li&gt;If the model gets stuck with a particular implementation or request, expect to have duplicated code snippets and functions with similar logic but slightly different names resulting from multiple attempts at solving the issue. This means that the model was really bad at cleaning up dead code unless you specifically ask it to evaluate some code by highlighting it.&lt;/li&gt;
  &lt;li&gt;After several interactions within the same chat, it is better to continue or start over in a new one: It helps you clear your thoughts with a fresh new prompt and therefore guide the model to better output.&lt;/li&gt;
  &lt;li&gt;I can’t stress this enough but if you are not starting from scratch and you will be updating an existing codebase, have your unit tests ready as your defense mechanism.&lt;/li&gt;
  &lt;li&gt;From time to time, it is useful to start your prompt by specifically asking the model not to make code changes. Ask it to give you multiple implementation options and review the suggestions before proceeding with any of them. If needed drill down on the one you found most appealing with follow up questions and clarifications.&lt;/li&gt;
  &lt;li&gt;Commit changes frequently especially between requests when you are satisfied with the suggested changes. This way it is easier to review follow up code changes in particular those made to the same files.&lt;/li&gt;
  &lt;li&gt;Review the whole codebase once you have committed new changes to keep your understanding of it in check and be able to track down potential issues or improvements.&lt;/li&gt;
  &lt;li&gt;Some changes are really small and you can just make them in place using the tab functionality:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/25_total_tabs_accepted.png&quot; alt=&quot;total tabs accepted&quot; /&gt;
  &lt;figcaption&gt;Figure 5: Total Tabs Accepted&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;With this we have reached the end of this post, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;Coming back to the original quest of this whole experiment: did AI supported me in doing things faster? for sure it did. Like any other tool when used properly and consciously it will help augment your abilities to do your work better and support you in many ways. Will programmers be replaced by AI? I’ll take that with a pinch of salt.&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="AI" /><summary type="html">In this article, I share some lessons learned from trying out vibe coding.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/25_total_line_changes.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/25_total_line_changes.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">101 Apache Kafka Cheatsheet</title><link href="https://www.firasesbai.com/articles/2025/09/15/apache-kafka-101.html" rel="alternate" type="text/html" title="101 Apache Kafka Cheatsheet" /><published>2025-09-15T00:00:00+00:00</published><updated>2025-09-15T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/09/15/apache-kafka-101</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/09/15/apache-kafka-101.html">&lt;p&gt;&lt;em&gt;101 Apache Kafka Cheatsheet&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-apache-kafka&quot; id=&quot;markdown-toc-what-is-apache-kafka&quot;&gt;What is Apache Kafka?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#core-concepts&quot; id=&quot;markdown-toc-core-concepts&quot;&gt;Core Concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-features&quot; id=&quot;markdown-toc-key-features&quot;&gt;Key Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#message-delivery-semantics&quot; id=&quot;markdown-toc-message-delivery-semantics&quot;&gt;Message delivery semantics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use-cases&quot; id=&quot;markdown-toc-use-cases&quot;&gt;Use Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;what-is-apache-kafka&quot;&gt;What is Apache Kafka?&lt;/h2&gt;

&lt;p&gt;Apache Kafka is an open-source distributed event streaming platform. It consists of highly scalable and fault tolerant &lt;strong&gt;servers&lt;/strong&gt; enabling real-time data ingestion and processing between &lt;strong&gt;clients&lt;/strong&gt; that are decoupled (source and target) and can scale independently.&lt;/p&gt;

&lt;h2 id=&quot;core-concepts&quot;&gt;Core Concepts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cluster&lt;/strong&gt;: A group of Kafka broker servers that work together to manage and distribute data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Broker&lt;/strong&gt;: A Kafka server that stores data and serves client requests (producers and consumers). Multiple brokers form a cluster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Topic&lt;/strong&gt;: A named stream of records to which producers send data and from which consumers read. Topics are split into partitions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Partition&lt;/strong&gt;: Each topic is divided into partitions, which are ordered, immutable sequences of messages. Partitions enable parallelism and scalability.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Producer&lt;/strong&gt;: An application or service that sends (publishes) records to Kafka topics.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Message Key&lt;/strong&gt;: producers can choose to send a key with records then messages for that key will always go to the same partition.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consumer&lt;/strong&gt;: An application or service that reads (subscribes to) records from Kafka topics.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consumer Group&lt;/strong&gt;: A group of consumers that work together to consume data from a topic, ensuring each message is processed only once by the group.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ZooKeeper&lt;/strong&gt;: Used for managing and coordinating Kafka brokers (leader election, metadata, etc.). 
Note: Newer Kafka versions are moving toward removing ZooKeeper dependency.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offset&lt;/strong&gt;: A unique identifier for each message within a partition, used by consumers to keep track of read messages.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Replication&lt;/strong&gt;: Each partition can be replicated across multiple brokers to ensure durability and high availability.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/24_apache_kafka_architecture.png&quot; alt=&quot;Example Kafka Topic &amp;amp; Producers &quot; /&gt;
  &lt;figcaption&gt;Figure 1: Example Kafka Topic &amp;amp; Producers - &lt;a href=&quot;https://kafka.apache.org/documentation/#gettingStarted&quot;&gt;Image Source&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;key-features&quot;&gt;Key Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;High Throughput&lt;/strong&gt;: Capable of handling millions of messages per second.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Low Latency&lt;/strong&gt;: Designed for real-time streaming and processing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Scales horizontally by adding brokers and partitions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;: Data is replicated across brokers; if one fails, another can take over.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Messages are persisted on disk and replicated.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decoupling&lt;/strong&gt;: Producers and consumers are independent, enabling flexible architectures.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multiple APIs&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Admin API&lt;/em&gt;: manage and inspect topics, brokers, and other Kafka objects.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Producer API&lt;/em&gt;: Publish data to topics.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Consumer API&lt;/em&gt;: Subscribe to and process data from topics.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Streams API&lt;/em&gt;: Build stream processing applications.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Connect API&lt;/em&gt;: Integrate with external systems (databases, file systems, etc.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;message-delivery-semantics&quot;&gt;Message delivery semantics&lt;/h2&gt;

&lt;p&gt;Apache Kafka provides three primary message delivery semantics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;At-most-once&lt;/strong&gt;: Messages are delivered zero or one time. Some messages may be lost, but never delivered more than once.
Typical usage in applicaitons with high-throughput, low latency requirements and risk of data loss.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;At-least-once&lt;/strong&gt;: Messages are delivered one or more times. No message is lost, but duplicates may occur. 
Typical usage in data pipelines where no data loss is acceptable, and duplicates can be handled.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exactly-once&lt;/strong&gt;: Each message is delivered once and only once. No data loss or duplicate delivery.
Ensures no message loss or duplication, but with increased latency and configuration overhead
Typical usage in Financial transactions and critical data flows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How kafka achieves these semantics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At-most-once:
    &lt;ul&gt;
      &lt;li&gt;Producer sends messages without waiting for acknowledgment (acks=0).&lt;/li&gt;
      &lt;li&gt;If a failure occurs before delivery, messages may be lost.&lt;/li&gt;
      &lt;li&gt;Consumer commits its offset before processing messages. If it crashes after committing but before processing, messages are lost.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At-least-once:
    &lt;ul&gt;
      &lt;li&gt;Producer waits for acknowledgment (acks=1 or acks=all).&lt;/li&gt;
      &lt;li&gt;If acknowledgment is not received, the producer retries, which can result in duplicate messages.&lt;/li&gt;
      &lt;li&gt;Consumers must be idempotent to handle possible duplicates&lt;/li&gt;
      &lt;li&gt;Consumer commits offset after processing. If it crashes before committing, messages may be processed again after recovery (duplicates possible).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exactly-once:
    &lt;ul&gt;
      &lt;li&gt;Producer uses idempotence and transactions; each message is written once even if retried.&lt;/li&gt;
      &lt;li&gt;Consumers and producers must be properly configured for transactional processing. Offset commits and output are part of the same transaction, ensuring atomicity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h2&gt;

&lt;p&gt;Some of the popular use cases for Apache Kafka include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Messaging&lt;/strong&gt;: replacement to traditional message broker for decoupling data processing between producers and consumers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Website activity tracking&lt;/strong&gt;: this is the original use case where a user’s site activity like page views, clicks and searches events are published to central topics 
and available for consumption from real time analytics and insights applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Metrics&lt;/strong&gt;: similarly apache kafka is used in aggregating statistics from distributed applications to produce centralized feeds of operational data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log aggregation&lt;/strong&gt;: used as a replacement for log aggregation solutions giving cleaner abstraction of log or event data as a stream of messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><summary type="html">101 Apache Kafka Cheatsheet</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/24_apache_kafka_architecture.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/24_apache_kafka_architecture.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">101 Apache Airflow Cheatsheet</title><link href="https://www.firasesbai.com/articles/2025/09/08/apache-airflow-101.html" rel="alternate" type="text/html" title="101 Apache Airflow Cheatsheet" /><published>2025-09-08T00:00:00+00:00</published><updated>2025-09-08T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/09/08/apache-airflow-101</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/09/08/apache-airflow-101.html">&lt;p&gt;&lt;em&gt;101 Apache Airflow Cheatsheet.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-apache-airflow&quot; id=&quot;markdown-toc-what-is-apache-airflow&quot;&gt;What is Apache Airflow?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#core-concepts&quot; id=&quot;markdown-toc-core-concepts&quot;&gt;Core Concepts&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#directed-acyclic-graphs-dags&quot; id=&quot;markdown-toc-directed-acyclic-graphs-dags&quot;&gt;Directed Acyclic Graphs (DAGs)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dag-run&quot; id=&quot;markdown-toc-dag-run&quot;&gt;DAG Run&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tasks&quot; id=&quot;markdown-toc-tasks&quot;&gt;Tasks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#task-instances&quot; id=&quot;markdown-toc-task-instances&quot;&gt;Task Instances&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#variables&quot; id=&quot;markdown-toc-variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture-components&quot; id=&quot;markdown-toc-architecture-components&quot;&gt;Architecture Components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture-components-1&quot; id=&quot;markdown-toc-architecture-components-1&quot;&gt;Architecture Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;what-is-apache-airflow&quot;&gt;What is Apache Airflow?&lt;/h2&gt;

&lt;p&gt;Apache Airflow is an open-source workflow management platform designed to programmatically author, schedule, and monitor complex data pipelines.&lt;/p&gt;

&lt;h2 id=&quot;core-concepts&quot;&gt;Core Concepts&lt;/h2&gt;

&lt;h3 id=&quot;directed-acyclic-graphs-dags&quot;&gt;Directed Acyclic Graphs (DAGs)&lt;/h3&gt;

&lt;p&gt;The fundamental structure in Airflow, representing a collection of tasks with defined dependencies. Each DAG is defined in Python code and dictates the order of task execution based on their relationships. A DAG is a graph structure where tasks are represented as nodes, and the dependencies between these tasks are represented as directed edges. The “directed” aspect indicates that tasks have a specific order of execution, while “acyclic” means there are no loops or cycles, preventing infinite execution paths.&lt;/p&gt;

&lt;h3 id=&quot;dag-run&quot;&gt;DAG Run&lt;/h3&gt;

&lt;p&gt;A DAG Run is an object representing an instantiation of the DAG in time. Any time the DAG is executed, a DAG Run is created and all tasks inside it are executed. The status of the DAG Run depends on the tasks states. Each DAG Run is run separately from one another, meaning that you can have many runs of a DAG at the same time.&lt;/p&gt;

&lt;h3 id=&quot;tasks&quot;&gt;Tasks&lt;/h3&gt;

&lt;p&gt;Task is the  individual units of work within a DAG. Each task represents a single operation, such as data extraction, transformation, or loading (ETL). The relationships between tasks are established using dependency definitions. This can be done through:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bitwise Operators: Using » to set downstream dependencies and « for upstream dependencies.&lt;/li&gt;
  &lt;li&gt;Methods: Using set_upstream() and set_downstream() methods to explicitly define task relationships.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are three common types of task:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Operators&lt;/strong&gt;, conceptually a template for predefined tasks that you can string together quickly to build most parts of your DAGs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sensors&lt;/strong&gt;, a special subclass of Operators which are entirely about waiting for an external event to happen.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;TaskFlow-decorated&lt;/strong&gt; @task, which is a custom Python function packaged up as a Task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To pass data between tasks you have three options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;XComs&lt;/strong&gt; (“Cross-communications”), a system where you can have tasks push and pull small bits of metadata identified by a &lt;strong&gt;key&lt;/strong&gt; as well as the &lt;strong&gt;task_id&lt;/strong&gt; and &lt;strong&gt;dag_id&lt;/strong&gt; it came from.&lt;/li&gt;
  &lt;li&gt;Uploading and downloading large files from a storage service (either one you run, or part of a public cloud)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TaskFlow API&lt;/strong&gt; automatically passes data between tasks via implicit XComs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;task-instances&quot;&gt;Task Instances&lt;/h3&gt;

&lt;p&gt;Much in the same way that a DAG is instantiated into a DAG Run each time it runs, task instances are specific executions of tasks at particular times, which can vary based on the DAG’s scheduling.&lt;/p&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Variables are Airflow’s runtime configuration concept - a general key/value store that is global and can be queried from your tasks, and easily set via Airflow’s user interface, or bulk-uploaded as a JSON file.
Variables are &lt;strong&gt;global&lt;/strong&gt;, and should only be used for overall configuration that covers the entire installation; to pass data from one Task/Operator to another, you should use XComs instead.&lt;/p&gt;

&lt;h2 id=&quot;architecture-components&quot;&gt;Architecture Components&lt;/h2&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/23_apache_airflow_architecture.png&quot; alt=&quot;Apache Airflow Architecture Components&quot; /&gt;
  &lt;figcaption&gt;Figure 1: Apache Airflow Architecture Components - &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.1.2/concepts/overview.html&quot;&gt;Image Source&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;: The component responsible for scheduling tasks and determining when they should run. It checks the DAG directory for tasks that need to be executed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Executor&lt;/strong&gt;: This defines how and where tasks are executed. Various executors are available.  In the default Airflow installation, this runs everything inside the scheduler, but most production-suitable executors actually push task execution out to workers.
Most executors will generally also introduce other components to let them talk to their workers - like a &lt;strong&gt;task queue&lt;/strong&gt; - but you can still think of the executor and its workers as a single logical component&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web Server&lt;/strong&gt;: Provides a user interface for monitoring and managing workflows, allowing users to inspect DAGs and task statuses.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A folder of DAG files&lt;/strong&gt;, read by the scheduler and executor (and any workers the executor has)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Metadata Database&lt;/strong&gt;: Stores all metadata related to DAGs and tasks, typically using PostgreSQL or MySQL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecture-components-1&quot;&gt;Architecture Components&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Task Management&lt;/strong&gt;: Airflow manages task dependencies automatically, ensuring that tasks execute in the correct order.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scheduling&lt;/strong&gt;: Airflow provides advanced scheduling capabilities, allowing workflows to run on defined schedules or trigger based on external events.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extensibility&lt;/strong&gt;: Users can create custom operators and plugins to extend Airflow’s functionality, integrating with various data sources and services.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error Handling and Retries&lt;/strong&gt;: Built-in mechanisms allow tasks to be retried automatically upon failure, enhancing workflow reliability.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Airflow can handle thousands of concurrent tasks across multiple workers, making it suitable for large-scale data operations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rich Command Line Interface (CLI)&lt;/strong&gt;: The CLI provides utilities for managing DAGs and executing tasks directly from the command line.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integration with Other Tools&lt;/strong&gt;: Airflow supports integration with various cloud services and data tools, including AWS, Google Cloud Platform, and many others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><summary type="html">101 Apache Airflow Cheatsheet.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/23_apache_airflow_architecture.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/23_apache_airflow_architecture.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blogging Tools</title><link href="https://www.firasesbai.com/articles/2025/08/18/blogging-tools.html" rel="alternate" type="text/html" title="Blogging Tools" /><published>2025-08-18T00:00:00+00:00</published><updated>2025-08-18T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/08/18/blogging-tools</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/08/18/blogging-tools.html">&lt;p&gt;&lt;em&gt;A curated list of tools that I’m using for writing and building this site.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, I have curated a list of resources and tools that help me manage everything from hosting and analytics to writing and working on this site. Finding the right tool can make a huge difference in terms of efficiency. While there are countless options out there, this is what works best for me.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So let’s get started!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-and-planning&quot; id=&quot;markdown-toc-writing-and-planning&quot;&gt;Writing and Planning&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#trello&quot; id=&quot;markdown-toc-trello&quot;&gt;Trello&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#obsidian&quot; id=&quot;markdown-toc-obsidian&quot;&gt;Obsidian&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#domain-and-hosting&quot; id=&quot;markdown-toc-domain-and-hosting&quot;&gt;Domain and Hosting&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cloudflare&quot; id=&quot;markdown-toc-cloudflare&quot;&gt;Cloudflare&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#github-pages&quot; id=&quot;markdown-toc-github-pages&quot;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#analytics-and-tracking&quot; id=&quot;markdown-toc-analytics-and-tracking&quot;&gt;Analytics and Tracking&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#google-analytics-4-ga4&quot; id=&quot;markdown-toc-google-analytics-4-ga4&quot;&gt;Google Analytics 4 (GA4)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#google-search-console&quot; id=&quot;markdown-toc-google-search-console&quot;&gt;Google Search Console&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#looker&quot; id=&quot;markdown-toc-looker&quot;&gt;Looker&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#seo&quot; id=&quot;markdown-toc-seo&quot;&gt;SEO&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ahrefs&quot; id=&quot;markdown-toc-ahrefs&quot;&gt;Ahrefs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#screaming-frog&quot; id=&quot;markdown-toc-screaming-frog&quot;&gt;Screaming Frog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#google-chrome-lighthouse&quot; id=&quot;markdown-toc-google-chrome-lighthouse&quot;&gt;Google Chrome Lighthouse&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#add-ons&quot; id=&quot;markdown-toc-add-ons&quot;&gt;Add-ons&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#email-marketing&quot; id=&quot;markdown-toc-email-marketing&quot;&gt;Email Marketing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#comments&quot; id=&quot;markdown-toc-comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#contact-form&quot; id=&quot;markdown-toc-contact-form&quot;&gt;Contact Form&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#speed-optimization&quot; id=&quot;markdown-toc-speed-optimization&quot;&gt;Speed Optimization&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cloudflare-1&quot; id=&quot;markdown-toc-cloudflare-1&quot;&gt;Cloudflare&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tinypng&quot; id=&quot;markdown-toc-tinypng&quot;&gt;TinyPNG&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#google-pagespeed-insights&quot; id=&quot;markdown-toc-google-pagespeed-insights&quot;&gt;Google Pagespeed Insights&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recap&quot; id=&quot;markdown-toc-recap&quot;&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;writing-and-planning&quot;&gt;Writing and Planning&lt;/h2&gt;

&lt;h3 id=&quot;trello&quot;&gt;Trello&lt;/h3&gt;

&lt;p&gt;Trello is a visual project management tool. I use it to organise the content workflow and capture ideas for potential articles. I keep it simple with just 3 lists representing the stages of the writing process: To Do, Doing, and Done. Each card within represents a blog post or some fixes or improvements to the site itself. To distinguish between them I use specific labels. This visual approach allows me to easily see what needs to be done and ensure I’m on track.&lt;/p&gt;

&lt;h3 id=&quot;obsidian&quot;&gt;Obsidian&lt;/h3&gt;

&lt;p&gt;Obsidian is a markdown based note taking app. In this context, i use it for kicking off drafts, creating notes for each blog post and capturing relevant research. It allows for linking notes together and creating interconnected central knowledge base where you can easily jump between related notes to brainstorm and rediscover information.&lt;/p&gt;

&lt;h2 id=&quot;domain-and-hosting&quot;&gt;Domain and Hosting&lt;/h2&gt;

&lt;h3 id=&quot;cloudflare&quot;&gt;Cloudflare&lt;/h3&gt;

&lt;p&gt;While often thought of for performance and security (which I’ll touch on later), Cloudflare also handles my DNS. It provides a fast and robust way to manage my domain’s records. For more details, you can check &lt;a href=&quot;https://www.firasesbai.com/articles/2025/01/19/google-domains-cloudflare-migration.html&quot;&gt;the following article&lt;/a&gt; where I outline how I migrated from Google Domains to Cloudflare.&lt;/p&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h3&gt;

&lt;p&gt;This is where the site physically lives. It’s a free solution for hosting static websites like this one directly from a GitHub repository, and it integrates seamlessly with custom domains via Cloudflare.&lt;/p&gt;

&lt;h2 id=&quot;analytics-and-tracking&quot;&gt;Analytics and Tracking&lt;/h2&gt;

&lt;h3 id=&quot;google-analytics-4-ga4&quot;&gt;Google Analytics 4 (GA4)&lt;/h3&gt;

&lt;p&gt;GA4 helps me understand traffic sources, user behavior, content performance, and conversions. It’s the primary source for overall site metrics.&lt;/p&gt;

&lt;h3 id=&quot;google-search-console&quot;&gt;Google Search Console&lt;/h3&gt;

&lt;p&gt;This is essential for understanding how my site performs in Google Search. It shows me search queries, indexing status, technical errors, and sitemaps.&lt;/p&gt;

&lt;h3 id=&quot;looker&quot;&gt;Looker&lt;/h3&gt;

&lt;p&gt;I use Looker to create custom dashboards pulling data from GA4, Cloudflare Analytics, Search Console and Google Forms. This allows me to visualize key metrics in a centralised view without switching between tools and overcoming data discrepancies as indicated in &lt;a href=&quot;https://www.firasesbai.com/articles/2024/08/11/cloudflare-vs-google-analytics.html&quot;&gt;this article&lt;/a&gt; where I cover the difference between Cloudflare Analytics and Google Analytics.&lt;/p&gt;

&lt;h2 id=&quot;seo&quot;&gt;SEO&lt;/h2&gt;

&lt;h3 id=&quot;ahrefs&quot;&gt;Ahrefs&lt;/h3&gt;
&lt;p&gt;I mainly use Ahrefs Webmaster Tools which gives you free access to a bundle of 3 tools if you can verify the ownership of your website. You can achieve this by connecting Google Search Console as the recommended approach. 
    - Web Analytics: You can setup web analytics for your site as an alternative to Google Analytics to get real time metrics about your visitors.
    - Site Audit: Scans your website for known technical and most common SEO issues such as broken links, duplicate content and missing metadata description. You can setup scheduled crawls of your site and get an email with an overview containing a health score of the site, number of issues grouped by severity and newly identified issues since the last crawl. This will allow you to proactively identify and fix issues to improve your site’s performance.
    - Site Explorer: Helps you gain insights into your site’s organic search performance&lt;/p&gt;

&lt;h3 id=&quot;screaming-frog&quot;&gt;Screaming Frog&lt;/h3&gt;

&lt;p&gt;Screaming Frog is a desktop based website crawler with a free version limited to 500 URLs which is more than enough for a small blog. It acts as a search engine spider by crawling your site’s URLs and extracting data to give you a comprehensive technical audit. By finding and fixing issues like broken links, you ensure a better user experience and help search engines properly crawl and index your site.&lt;/p&gt;

&lt;h3 id=&quot;google-chrome-lighthouse&quot;&gt;Google Chrome Lighthouse&lt;/h3&gt;

&lt;p&gt;As part of the Chrome browser’s developer tools, Lighthouse provides a detailed report on the performance, accessibility, best practices and SEO of any web page. It is very handy for a quick and easy way to check the health of individual pages on the site locally before publishing them.&lt;/p&gt;

&lt;h2 id=&quot;add-ons&quot;&gt;Add-ons&lt;/h2&gt;

&lt;h3 id=&quot;email-marketing&quot;&gt;Email Marketing&lt;/h3&gt;

&lt;p&gt;Building an email list is vital for direct communication with my audience. I’ve explored tools like &lt;strong&gt;ConvertKit&lt;/strong&gt; and &lt;strong&gt;Mailerlite&lt;/strong&gt;, both offering features to build and manage subscriber lists, create landing pages, and send broadcasts or sequences. I have settled for Mailerlite as the free plan was more interesting especially for starting out with small number of subscribers.&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;I use &lt;strong&gt;Disqus&lt;/strong&gt; for managing comments on the blog posts. Originally I started out using Github API where I create an issue for each blog post and the comments section will redirect the users to commenting on the created issue. The list of all the comments is then fetched from the API. This was easy to setup initially but had limits as it requires the users to have a Github account and to be logged in. In addition, the overhead of maintaining the different issues made it easy to switch to Disqus as it provides a robust commenting system with moderation tools.&lt;/p&gt;

&lt;h3 id=&quot;contact-form&quot;&gt;Contact Form&lt;/h3&gt;

&lt;p&gt;I use an embedded &lt;strong&gt;Google Forms&lt;/strong&gt; in my contact page to enable visitors of my site to reach out and handle their requests and inquiries.&lt;/p&gt;

&lt;h2 id=&quot;speed-optimization&quot;&gt;Speed Optimization&lt;/h2&gt;

&lt;h3 id=&quot;cloudflare-1&quot;&gt;Cloudflare&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, using Cloudflare comes with the additional bonus of faster and more responsive website. This is achieved through its role as a Content Delivery Network (CDN). A CDN is a network of servers located all over the world. When a visitor comes to my blog, Cloudflare automatically serves the static content (like images, CSS, and JavaScript files) from the server closest to them. This dramatically reduces the physical distance the data has to travel, which in turn cuts down on page load times.&lt;/p&gt;

&lt;h3 id=&quot;tinypng&quot;&gt;TinyPNG&lt;/h3&gt;

&lt;p&gt;Images are often the biggest culprit for slow page load times. TinyPNG is a free online tool that uses smart lossy compression techniques to reduce the file size of my images without a noticeable loss in quality.&lt;/p&gt;

&lt;h3 id=&quot;google-pagespeed-insights&quot;&gt;Google Pagespeed Insights&lt;/h3&gt;

&lt;p&gt;While using Google Chrome Lighthouse before publishing a post is useful for seeing how the introduced changes affect the performance, it is still run under controlled, simulated conditions such as throttled netweok speed on a specific device. This is where Pagespeed Insights comes in handy by complementing that with data on how real world visitors have experienced your site. It provides a holistic view of performance for both mobile and desktop with a list of actionable recommendations. This is a more accurate representation of how your site performs for your actual audience, across various devices and network conditions.&lt;/p&gt;

&lt;p&gt;If you have any remarks or suggestions for me, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;This is not an exhaustive list but rather a work in progress. Each tool serves a specific purpose in streamlining the process from writing to managing the site’s performance. While the exact setup may evolve, the goal remains the same: keep things simple and effective.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Blogging" /><summary type="html">A curated list of tools that I’m using for writing and building this site.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/default-sep-tag-image.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/default-sep-tag-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing My Data Engineering Tech Radar</title><link href="https://www.firasesbai.com/articles/2025/08/10/data-engineering-tech-radar.html" rel="alternate" type="text/html" title="Introducing My Data Engineering Tech Radar" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/08/10/data-engineering-tech-radar</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/08/10/data-engineering-tech-radar.html">&lt;p&gt;&lt;em&gt;Launching a Data Engineering Tech Radar.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The world of data engineering is constantly changing. New tools emerge every week, architectural patterns fall in and out of favor, and the hype cycle churns endlessly. I’m sure we all at some point have come across variations of landscapes or state of data engineering diagrams packed with unreadable logos. Be assured, this is not one of those.&lt;/p&gt;

&lt;p&gt;Keeping up feels like a full-time job already and we are usually looking to find something to help us cut through the noise and answer the following: How do you decide which technologies are genuinely worth your time?&lt;/p&gt;

&lt;p&gt;To help, first myself, answer that question, I created this &lt;strong&gt;&lt;a href=&quot;https://www.firasesbai.com/data-tech-radar/&quot; target=&quot;_blank&quot;&gt;Data Engineering Tech Radar&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Inspired by the pioneering &lt;a href=&quot;https://www.thoughtworks.com/en-de/radar&quot;&gt;ThoughtWorks Tech Radar&lt;/a&gt;, this is my curated, opinionated, and practical guide to the data ecosystem. It’s a snapshot of my perspective on the tools, platforms, languages, and techniques that I have personally used or seen other teams adopt them in production. It is also a way to capture and keep track of what actually matters in our field right now and not feel overwhelmed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#why-a-tech-radar&quot; id=&quot;markdown-toc-why-a-tech-radar&quot;&gt;Why a Tech Radar?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-it-works-quadrants-and-rings&quot; id=&quot;markdown-toc-how-it-works-quadrants-and-rings&quot;&gt;How It Works: Quadrants and Rings&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-quadrants&quot; id=&quot;markdown-toc-the-quadrants&quot;&gt;The Quadrants&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-rings&quot; id=&quot;markdown-toc-the-rings&quot;&gt;The Rings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-is-just-the-beginning&quot; id=&quot;markdown-toc-this-is-just-the-beginning&quot;&gt;This Is Just the Beginning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;why-a-tech-radar&quot;&gt;Why a Tech Radar?&lt;/h2&gt;

&lt;p&gt;My motivation for creating this radar is threefold:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;To Navigate Complexity:&lt;/strong&gt; The goal isn’t to list every tool, but to provide a filter. This radar helps separate the signal from the noise by offering a structured opinion on what’s production-ready, what’s promising, and what you might want to proceed with caution on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;To Share Real-World Experience:&lt;/strong&gt; Tutorials can show you &lt;em&gt;how&lt;/em&gt; a tool works, but they rarely tell you &lt;em&gt;if&lt;/em&gt; you should use it. This radar is built on hands-on experience, reflecting what has worked well in practice and the lessons learned along the way.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;To Track a Moving Target:&lt;/strong&gt; The data landscape is not static, and neither is this radar. It’s a living document that I will update periodically to reflect new developments and evolving opinions, serving as a log of how our industry changes over time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-it-works-quadrants-and-rings&quot;&gt;How It Works: Quadrants and Rings&lt;/h2&gt;

&lt;p&gt;To make sense of everything, the radar is broken down into four quadrants and four rings.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/22_data_tech_radar.png&quot; alt=&quot;Data Tech Radar&quot; /&gt;
  &lt;figcaption&gt;Figure 1: Data Tech Radar&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;the-quadrants&quot;&gt;The Quadrants&lt;/h3&gt;

&lt;p&gt;The quadrants categorize items by their functional area in the data lifecycle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Languages &amp;amp; Frameworks:&lt;/strong&gt; This quadrant covers the foundational skills, languages and frameworks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transformation &amp;amp; Orchestration:&lt;/strong&gt; Tools and practices for data transformation, ETL processes, and workflow orchestration.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Platforms &amp;amp; Storage&lt;/strong&gt;: Technologies for data storage, databases, and data warehousing solutions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Analytics:&lt;/strong&gt; Tools and platforms for data analysis, visualization, and business intelligence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-rings&quot;&gt;The Rings&lt;/h3&gt;

&lt;p&gt;The rings represent my opinion on a technology’s maturity and my recommendation for its adoption.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Adopt:&lt;/strong&gt; Technologies that are well-established and I have used or seen other teams adopt them in production and they’ve proven their value.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trial:&lt;/strong&gt; Emerging technologies that show promise and I have started exploring them or using on non-critical projects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assess:&lt;/strong&gt; Technologies that caught my eye and are used or recommended by other teams that I think are worth exploring.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hold:&lt;/strong&gt; Technologies to proceed with caution on and I would not recommended for new projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;this-is-just-the-beginning&quot;&gt;This Is Just the Beginning&lt;/h2&gt;

&lt;p&gt;This is just the initial release and it might not have all the tools I have under the radar but this radar is a starting point, a snapshot in time, and it should be treated as such. My opinions will change as I learn, and new tools will emerge that demand a spot. I plan to revisit and update the radar periodically to keep it relevant.&lt;/p&gt;

&lt;p&gt;But most importantly, this is meant to be a conversation starter.&lt;/p&gt;

&lt;p&gt;What did I get right? What do you completely disagree with? What hidden gems are missing from the “Assess” ring? I’d love to hear your thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out the full &lt;a href=&quot;https://www.firasesbai.com/data-tech-radar/&quot; target=&quot;_blank&quot;&gt;Data Engineering Tech Radar&lt;/a&gt; and let me know what you think.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><summary type="html">Launching a Data Engineering Tech Radar.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/22_data_tech_radar.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/22_data_tech_radar.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Engineering Capabilities and Personas</title><link href="https://www.firasesbai.com/articles/2025/05/25/data-engineering-capabilities-and-personas.html" rel="alternate" type="text/html" title="Data Engineering Capabilities and Personas" /><published>2025-05-25T00:00:00+00:00</published><updated>2025-05-25T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/05/25/data-engineering-capabilities-and-personas</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/05/25/data-engineering-capabilities-and-personas.html">&lt;p&gt;&lt;em&gt;In this article, we will look at key data engineering capabilities at the intersection of several archetypes and personas.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.firasesbai.com/articles/2023/03/01/data-engineering-101.html&quot;&gt;a previous article&lt;/a&gt;, we looked into the role of a data engineer and the general responsibilities associated with it. However, the field of data engineering has changed dramatically over the last decade. This led to the emergence of different constellations of data teams. Depending on the company size and maturity level, more specialized personas appeared requiring certain set of capabilities. In today’s article, we will breakdown these types and the expected capabilities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So let’s get started!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#software-engineering-at-heart&quot; id=&quot;markdown-toc-software-engineering-at-heart&quot;&gt;Software Engineering at Heart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-platform-engineering&quot; id=&quot;markdown-toc-data-platform-engineering&quot;&gt;Data Platform Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#analytics-engineering&quot; id=&quot;markdown-toc-analytics-engineering&quot;&gt;Analytics Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recap&quot; id=&quot;markdown-toc-recap&quot;&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;software-engineering-at-heart&quot;&gt;Software Engineering at Heart&lt;/h2&gt;

&lt;p&gt;There is a lot of debate and people comparing the role of data engineer with traditional software engineering. Some would argue that a data engineer is just a specialized software engineer while others would question the complexity and required technical skills in data engineering. One thing we can take out from this though is that the lines between the roles are blurring.&lt;/p&gt;

&lt;p&gt;A data engineer should be able to build, maintain and test the software architecture for managing different complexities of data. This includes understanding the principles, patterns and practices of writing clean code that is easy to evolve, test and get into production. A solid understanding of distributed systems and microservices architecture through the lenses of Application Programming Interfaces (APIs) in order to implement a secure, scalable and performant solution.&lt;/p&gt;

&lt;h2 id=&quot;data-platform-engineering&quot;&gt;Data Platform Engineering&lt;/h2&gt;

&lt;p&gt;Another area data teams focus on is the design and operation of the infrastructure required to run different types of data workloads. This includes knowing the tradeoffs between on-premises and cloud infrastructure as well as related tools and practices such as infrastructure as code, monitoring, performance testing and optimization.&lt;/p&gt;

&lt;p&gt;The purpose of building a data platform is to cover the end to end data lifecycle and related aspects including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data pipelines:
    &lt;ul&gt;
      &lt;li&gt;Ability to build, deploy, and orchestrate data pipelines and the different technology options to implement them. Examples include Extract-Transform-Load (ETL), Extract-Load-Transform (ELT), Change Data Capture (CDC), and batch vs. streaming pipelines.&lt;/li&gt;
      &lt;li&gt;Building data pipelines is not just about moving data from one system to another. It involves continuously evaluating, monitoring and improving the quality of your data over time. Common data quality aspects include completeness, timeliness, accuracy, integrity, and consistency.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Modeling:
    &lt;ul&gt;
      &lt;li&gt;Ability to model data in different types of databases according to the data architecture and business needs. This includes RDBMS, data warehouses, key-value stores, document stores, graph databases, distributed file systems and columnar data stores.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Storage:
    &lt;ul&gt;
      &lt;li&gt;Ability to understand and choose different platforms and technology options to store data. This includes different types of databases, data lake, data warehouse, and data serialization formats.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Governance:
    &lt;ul&gt;
      &lt;li&gt;Data governance includes a company-wide principles, practices and organizational structures. It involves the ability to understand, design, and apply security controls around the sharing and using of data across the enterprise. Encompassing aspects around authorization, encryption, information security, compliance and regulatory needs. In addition, familiarity with the elements of data privacy and ethics such as bias, are crucial in order to detect and mitigate the anticipated threats, vulnerabilities and unintended consequences that can arise when using data.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analytics-engineering&quot;&gt;Analytics Engineering&lt;/h2&gt;

&lt;p&gt;One more area to cover is analytics engineering where data engineering teams focus on extracting insights and knowledge from the processed data at the end of the data lifecycle. In addition to understanding multidimensional modeling and data warehousing technologies, it involves the ability to derive insights and actionable knowledge delivering clear reports, dashboards and KPIs containing compelling and effective visualizations to inform stakeholders and to support business decision-making.&lt;/p&gt;

&lt;p&gt;With this we have reached the end of this post, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;Let me know what other teams should we include?&lt;/p&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;In this article, we discussed core capabilities required across different personas and team structures. Understanding these constellations helps organizations build effective teams and deliver value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><summary type="html">In this article, we will look at key data engineering capabilities at the intersection of several archetypes and personas.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/default-sep-tag-image.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/default-sep-tag-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Encoding and Formats</title><link href="https://www.firasesbai.com/articles/2025/05/18/data-encoding-and-formats.html" rel="alternate" type="text/html" title="Data Encoding and Formats" /><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/05/18/data-encoding-and-formats</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/05/18/data-encoding-and-formats.html">&lt;p&gt;&lt;em&gt;In this article, we will explore the importance of data encoding and how to choose the right data format, weather it is simple CSVs or binary formats like Avro and Parquet, in order to achieve better performance, cost, and evolvability.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Data Serialization and Data Formats go hand in hand; one converts data objects to a shareable or storable structure and the other describes how this new structure is stored or transmitted and retrieved. The choice of &lt;em&gt;how&lt;/em&gt; we serialize and the &lt;em&gt;format&lt;/em&gt; we use impacts performance, storage costs and interoperability. Getting it right is key to building efficient, scalable, and maintainable data pipelines.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So let’s get started!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#data-serialization&quot; id=&quot;markdown-toc-data-serialization&quot;&gt;Data Serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-formats-characteristics&quot; id=&quot;markdown-toc-data-formats-characteristics&quot;&gt;Data Formats Characteristics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#standardized-textual-formats&quot; id=&quot;markdown-toc-standardized-textual-formats&quot;&gt;Standardized Textual Formats&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#xml&quot; id=&quot;markdown-toc-xml&quot;&gt;XML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#json&quot; id=&quot;markdown-toc-json&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#csv&quot; id=&quot;markdown-toc-csv&quot;&gt;CSV&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#binary-data-formats&quot; id=&quot;markdown-toc-binary-data-formats&quot;&gt;Binary Data Formats&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#apache-avro&quot; id=&quot;markdown-toc-apache-avro&quot;&gt;Apache Avro&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#apache-parquet&quot; id=&quot;markdown-toc-apache-parquet&quot;&gt;Apache Parquet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#apache-orc-optimized-row-columnar&quot; id=&quot;markdown-toc-apache-orc-optimized-row-columnar&quot;&gt;Apache ORC (Optimized Row Columnar)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#choosing-the-right-format&quot; id=&quot;markdown-toc-choosing-the-right-format&quot;&gt;Choosing the Right Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recap&quot; id=&quot;markdown-toc-recap&quot;&gt;Recap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;data-serialization&quot;&gt;Data Serialization&lt;/h2&gt;

&lt;p&gt;The seemingly simple act of storing data or sending it across a network involves a fundamental process: &lt;strong&gt;data serialization&lt;/strong&gt;. This is the conversion of data objects, residing in potentially complex in-memory structures (like objects, lists, trees in our code), into a byte stream suitable for persistent storage or network transmission. Once data arrives at its destination, the reverse process, &lt;strong&gt;deserialization&lt;/strong&gt; (or parsing/decoding), reconstructs the original object structures from the byte sequence.&lt;/p&gt;

&lt;p&gt;For example, in the context of databases, when a process is writing data to the database, the data is initially encoded into a sequence of bytes and then stored. Later when another process tries to read data from the database, it needs to decode it first. Similarly the communication between web services through REST APIs involves encoding the request by the client before sending it. Once the server receives it, it decodes the request, process it and then encode the response to be sent back to the client. The latter makes the last deserialization of this exchange.&lt;/p&gt;

&lt;p&gt;Data serialization is ideal for storing data efficiently as serialized data takes up less storage space. This results in faster data transfer and reduced latency as data can be transmitted quickly and efficiently over networks. In addition, it enhances flexibility and interoperability making data exchange seamless across different applications and networks.&lt;/p&gt;

&lt;p&gt;With this understanding and examples of the data serialization process and its application, in the coming sections we will look into the types and characteristics of common data formats.&lt;/p&gt;

&lt;h2 id=&quot;data-formats-characteristics&quot;&gt;Data Formats Characteristics&lt;/h2&gt;

&lt;p&gt;Before going through each data format separately, let’s start by understanding general characteristics we will be using when evaluating how they behave, what they are good for and where they might fall short.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Human Readability&lt;/strong&gt;: Can humans easily open and understand the data with a text editor?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compressibility:&lt;/strong&gt; How well does the format compress and how much space does it take? This is important for saving storage and network bandwidth.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed and Performance&lt;/strong&gt;: How quickly can the format be read/written?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Splittable:&lt;/strong&gt; Can a single large file be processed in parallel chunks? This is essential for distributed data processing frameworks such as Apache Spark.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Schema Support&lt;/strong&gt;: Does the format have a defined &lt;strong&gt;schema&lt;/strong&gt; (structure definition)? Schema allows for validation and consistent data interpretation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Self-describing:&lt;/strong&gt; Does the file embed its own schema or metadata about its structure? This simplifies reading without needing external schema definitions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Schema Evolution:&lt;/strong&gt; How well does the format handle changes (adding/removing fields) over time while maintaining compatibility?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: Can it be easily used across languages, tools, platforms?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;standardized-textual-formats&quot;&gt;Standardized Textual Formats&lt;/h2&gt;

&lt;p&gt;Many programming languages provide built-in mechanisms for encoding in-memory objects into byte sequences like Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pickle&lt;/code&gt; module. While these are easy to use, the encoding is tightly coupled to the specific language used making it very difficult or impossible to read the data in a different programming languages. In addition, the processes of encoding and decoding are usually CPU intensive and result in a sizeable encoded data. Not to mention that they are open to security vulnerabilities when malicious byte sequence is decoded that causes the application to instantiate unintended classes, potentially leading to arbitrary code execution.&lt;/p&gt;

&lt;p&gt;To overcome the limitations of language-specific formats, standardized encodings readable by multiple languages are widely used. Common examples include JSON, XML, and CSV due to their human-readability and simplicity, especially for data exchange.&lt;/p&gt;

&lt;h3 id=&quot;xml&quot;&gt;XML&lt;/h3&gt;
&lt;p&gt;XML (eXtensible Markup Language) is a nested markup format. Its hierarchical structure makes it splittable by elements, though it is often criticized for verbosity which reduces compression efficiency. It’s still widely used in enterprise environments despite declining popularity due to complexity.&lt;/p&gt;

&lt;h3 id=&quot;json&quot;&gt;JSON&lt;/h3&gt;
&lt;p&gt;JSON (JavaScript Object Notation) gained popularity due to its relative simplicity in comparison to XML and native support in web browsers. JSON offers a simpler, row-like nested structure with arrays and objects, making it both compressible and splittable. It’s self-describing (with field names), making it easier for data exchange, though schema evolution isn’t natively supported. JSON is common in web APIs, configs, and moderately complex datasets.&lt;/p&gt;

&lt;h3 id=&quot;csv&quot;&gt;CSV&lt;/h3&gt;
&lt;p&gt;CSV (Comma Separated Values) is a flat, row-based format that’s highly compressible and trivially splittable by lines. It lacks self-description and schema enforcement, making it lightweight but error-prone. It’s ideal for small, tabular data where structure is known or managed externally.&lt;/p&gt;

&lt;p&gt;Despite being readable, these textual formats share some key limitations. For instance, in both XML and CSV there is no clear distinction between a number and a string composed of digits. JSON on the other hand does separate numbers from strings but doesn’t specify numeric types or their precision. In addition, all three formats lack native support for binary data (sequences of raw bytes like images) and this usually involves encoding it into text using schemes like Base64, which increases the data size.&lt;/p&gt;

&lt;h2 id=&quot;binary-data-formats&quot;&gt;Binary Data Formats&lt;/h2&gt;

&lt;p&gt;There has been a couple of projects that converted JSON and XML into a binary representation and tried to solve some of the problems we mentioned before but the main drawback still the missing schema. For small data sets, the gains might be negligible but for large datasets or performance-critical applications, choosing the appropriate binary format offers significant advantages in size and speed. Therefore, in this section we will look into the characteristics of 3 common binary formats: Apache Avro, Apache Parquet and Apache ORC.&lt;/p&gt;

&lt;h3 id=&quot;apache-avro&quot;&gt;Apache Avro&lt;/h3&gt;

&lt;p&gt;Apache Avro is a data serialization system providing rich data structures and compact binary data format. It started in 2009 as a sub project of Hadoop as a result of &lt;a href=&quot;https://thrift.apache.org/&quot;&gt;Thrift&lt;/a&gt; not being a good fit for Hadoop’s use case. 
A key feature of Apache Avro is its robust support for schema evolution. It uses JSON-based schema definition. The schema is typically &lt;strong&gt;embedded within the data file&lt;/strong&gt; which permits full processing of the data without code generation and less type information encoded within the data resulting in smaller serialization size. 
Crucially, Avro distinguishes between the &lt;strong&gt;writer’s schema&lt;/strong&gt; (used during encoding) and the &lt;strong&gt;reader’s schema&lt;/strong&gt; (used during decoding). They don’t need to be identical, only &lt;em&gt;compatible&lt;/em&gt;, enabling robust &lt;strong&gt;schema evolution&lt;/strong&gt;.
Apache Avro is often used in write-heavy batch ingestion, streaming data messages like Apache Kafka and scenarios needing strong schema validation and evolution guarantees.&lt;/p&gt;

&lt;h3 id=&quot;apache-parquet&quot;&gt;Apache Parquet&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Parquet&lt;/strong&gt; is a columnar storage format optimized for analytical workloads, developed jointly by Cloudera and Twitter in 2013 as part of the Hadoop ecosystem.
Parquet stores data in a &lt;strong&gt;column-oriented&lt;/strong&gt; layout, which means data from the same column are stored together. This design allows for &lt;strong&gt;highly efficient scans&lt;/strong&gt; when querying subsets of columns and enables advanced &lt;strong&gt;compression and encoding techniques&lt;/strong&gt; tailored per column.
Parquet supports schema evolution through metadata that tracks schema changes over time. Parquet files embed the schema, allowing readers to reconcile differences between older and newer versions using a &lt;strong&gt;merge&lt;/strong&gt; strategy.
Apache Parquet is often used in data lakes, data warehouses and large-scale analytics engines like Spark, Presto, Trino, etc.&lt;/p&gt;

&lt;h3 id=&quot;apache-orc-optimized-row-columnar&quot;&gt;Apache ORC (Optimized Row Columnar)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache ORC&lt;/strong&gt; (Optimized Row Columnar) is another high-performance columnar format, created in 2013 by Hortonworks to optimize Hive workloads. Like Parquet, ORC organizes data column-wise but adds features tailored for Hive, such as ACID transaction support. It also stores extensive metadata, such as min/max values and row-level statistics, enabling &lt;strong&gt;aggressive query optimizations&lt;/strong&gt;. ORC files store schema information and statistics in footers, enabling efficient reads.
While similar to Parquet in structure, ORC shines in Hive-centric workflows and &lt;strong&gt;write-once, read-many&lt;/strong&gt; batch processing jobs. Its design emphasizes &lt;strong&gt;fast scan performance&lt;/strong&gt; and &lt;strong&gt;compression ratios&lt;/strong&gt;, especially when working with large, structured datasets.&lt;/p&gt;

&lt;h2 id=&quot;choosing-the-right-format&quot;&gt;Choosing the Right Format&lt;/h2&gt;

&lt;p&gt;Choosing a format isn’t just about static storage. Systems evolve and so does the underlying data. There is no single best format and the choice will depend on some tradeoffs even though in practice pipelines end up using multiple formats for different purposes.&lt;/p&gt;

&lt;p&gt;The following table compares the key characteristics worth having in mind when choosing among the data formats we discussed:&lt;/p&gt;

&lt;div style=&quot;overflow-x: auto;&quot;&gt;
  
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Characteristic&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;CSV&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Avro&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Parquet&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;ORC&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Human Readability&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes (simple)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Compressibility&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Moderate (verbose)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Moderate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Low&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;High (binary + schema)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Very High (columnar)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Very High (columnar)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Speed &amp;amp; Performance(Read/Write)&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Slow (verbose parsing)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Decent (for small data)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fast (simple format)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Fast&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Very Fast (columnar)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Very Fast (columnar)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Splittable&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Partial (depends on parser)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes (if line delimited)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Schema Support&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Optional (XSD, external)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Optional&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Schema Evolution&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Poor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Poor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;None&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Excellent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Good&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Good&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Best Use Case&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Config/debugging with structure&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debugging, API responses&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Simple tabular data&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OLTP-like ingestion, Kafka&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OLAP, analytics, Spark/Hadoop&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OLAP, analytics, Hive/Spark&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Read vs. Write&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Read/debugging&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Read/debugging&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Read/debugging&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Write-heavy (streaming, Kafka)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Read-heavy (query performance)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Read-heavy (query performance)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Data Complexity&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Supports nesting&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Supports nesting&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Flat only&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Supports nesting&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Supports nesting&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Supports nesting&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;/div&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;Table 1: Characteristics of data formats&lt;/p&gt;

&lt;p&gt;With this we have reached the end of this post, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;We’ve explored the critical role of data serialization and file formats in data engineering. We saw the limitations of language-specific and simple textual formats (CSV, JSON, XML) and contrasted them with powerful, schema-driven binary formats like Avro, Parquet, and ORC. Understanding the trade-offs—read/write performance, compression, splittability, schema evolution, and human readability—is vital for choosing the right tool for the job.&lt;/p&gt;

&lt;p&gt;These file formats often form the storage layer for modern &lt;strong&gt;Open Table Formats&lt;/strong&gt; (Apache Iceberg, Apache Hudi, Delta Lake), which add transactional capabilities, time travel, and enhanced schema management on top – a powerful combination and perhaps a topic for a future deep dive!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.datanami.com/2018/05/16/big-data-file-formats-demystified/&quot;&gt;https://www.datanami.com/2018/05/16/big-data-file-formats-demystified/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://luminousmen.com/post/big-data-file-formats&quot;&gt;https://luminousmen.com/post/big-data-file-formats&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.confluent.io/learn/data-serialization/&quot;&gt;https://www.confluent.io/learn/data-serialization/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://d9nich.medium.com/json-xml-protobuf-thrift-avro-or-everything-you-need-to-know-about-encoding-data-6077a7e769e2&quot;&gt;https://d9nich.medium.com/json-xml-protobuf-thrift-avro-or-everything-you-need-to-know-about-encoding-data-6077a7e769e2&lt;/a&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Data Engineering" /><summary type="html">In this article, we will explore the importance of data encoding and how to choose the right data format, weather it is simple CSVs or binary formats like Avro and Parquet, in order to achieve better performance, cost, and evolvability.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/default-sep-tag-image.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/default-sep-tag-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Migrating from Google Domains to Cloudflare</title><link href="https://www.firasesbai.com/articles/2025/01/19/google-domains-cloudflare-migration.html" rel="alternate" type="text/html" title="Migrating from Google Domains to Cloudflare" /><published>2025-01-19T00:00:00+00:00</published><updated>2025-01-19T00:00:00+00:00</updated><id>https://www.firasesbai.com/articles/2025/01/19/google-domains-cloudflare-migration</id><content type="html" xml:base="https://www.firasesbai.com/articles/2025/01/19/google-domains-cloudflare-migration.html">&lt;p&gt;&lt;em&gt;In this article, I will outline how I migrated from Google Domains, due to its shutdown, to Cloudflare all while explaining some key terms and concepts.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On 15.06.2023, Google announced that Google Domains is shutting down and Squarespace is buying all customer accounts. I was a happy customer ever since I started this site and chose Google Domains to host its domain until this announcement.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt; Contents &lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-domain-registrar&quot; id=&quot;markdown-toc-what-is-a-domain-registrar&quot;&gt;What is a Domain Registrar?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-dns-provider&quot; id=&quot;markdown-toc-what-is-a-dns-provider&quot;&gt;What is a DNS Provider?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-dns-records&quot; id=&quot;markdown-toc-what-are-dns-records&quot;&gt;What are DNS Records?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#domain-name-structure&quot; id=&quot;markdown-toc-domain-name-structure&quot;&gt;Domain Name Structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-cloudflare&quot; id=&quot;markdown-toc-why-cloudflare&quot;&gt;Why Cloudflare?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#migration-steps&quot; id=&quot;markdown-toc-migration-steps&quot;&gt;Migration Steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recap&quot; id=&quot;markdown-toc-recap&quot;&gt;Recap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;what-is-a-domain-registrar&quot;&gt;What is a Domain Registrar?&lt;/h2&gt;

&lt;p&gt;A domain registrar is an organization that allows you to register and manage your domain name. Think of it like a middleman between you and the internet – they help facilitate communication between your domain name and the servers that host your website.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-dns-provider&quot;&gt;What is a DNS Provider?&lt;/h2&gt;

&lt;p&gt;A Domain Name System (DNS) provider is a service that manages the settings for your domain name. It handles DNS records, which are used to connect your domain name to IP addresses or other details.&lt;/p&gt;

&lt;p&gt;This works through &lt;strong&gt;Authoritative Name Servers (NS)&lt;/strong&gt; managed by the DNS provider and act like the “brain” of your domain. They store and update your DNS records to keep everything accurate and working correctly.&lt;/p&gt;

&lt;p&gt;There are DNS hosting providers that offer domain registration and vice versa such as Cloudflare but the two services should not be confused.&lt;/p&gt;

&lt;p&gt;For more information on the communication flow between your browser, the DNS provider and your web server, check the resources section.&lt;/p&gt;

&lt;h2 id=&quot;what-are-dns-records&quot;&gt;What are DNS Records?&lt;/h2&gt;

&lt;p&gt;DNS records are like the phonebook of the internet. They help connect your domain name (e.g., example.com) to an IP address or other relevant information. Think of it like a map that helps your website find its way on the web.&lt;/p&gt;

&lt;p&gt;There are several types of DNS records, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A Record&lt;/strong&gt; : Maps a domain or subdomain to an IPv4 address.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AAAA Record&lt;/strong&gt; : Maps a domain or subdomain to an IPv6 address.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CNAME Record&lt;/strong&gt; : Creates an alias or nickname for a domain or subdomain, pointing it to another domain name. This is often used for creating subdomains or for pointing one domain to another.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MX Record&lt;/strong&gt; : Specifies the mail servers responsible for receiving email messages on behalf of a domain.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TXT Record&lt;/strong&gt; : Stores arbitrary text data for various purposes, including domain verification and email authentication (SPF, DKIM).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NS Record&lt;/strong&gt; : Specifies the authoritative name servers for a domain. These servers hold the DNS records for the domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;domain-name-structure&quot;&gt;Domain Name Structure&lt;/h2&gt;

&lt;p&gt;The diagram below decomposes the structure of a domain name:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/articles/21_domain_name_structure_diagram.png&quot; alt=&quot;domain name structure diagram&quot; /&gt;
  &lt;figcaption&gt;Figure 1: Domain Name Structure Diagram - &lt;a href=&quot;https://love2dev.com/blog/domain-names/&quot;&gt;Image Source&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;why-cloudflare&quot;&gt;Why Cloudflare?&lt;/h2&gt;

&lt;p&gt;Cloudflare is a popular choice and it stood out for me for the following features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ease of use with simple and clean interface&lt;/li&gt;
  &lt;li&gt;Free DNS Management and configuration of your DNS settings.&lt;/li&gt;
  &lt;li&gt;Protection against attacks, including a built-in firewall and DDoS mitigation.&lt;/li&gt;
  &lt;li&gt;Content caching and image optimization to speed up your site and enhance its performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;migration-steps&quot;&gt;Migration Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Add Your Domain to Cloudflare
    &lt;ul&gt;
      &lt;li&gt;Sign up for a Cloudflare account if you don’t already have one.&lt;/li&gt;
      &lt;li&gt;Log in and add your domain. In Cloudflare, domains are referred to as “zones.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Update the Nameservers in Google Domains
    &lt;ul&gt;
      &lt;li&gt;Log in to your Google Domains account.&lt;/li&gt;
      &lt;li&gt;Find the nameserver settings for your domain and replace them with the nameservers provided by Cloudflare. This step tells the internet to start using Cloudflare to manage your DNS.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Verify Zone Activation in Cloudflare
    &lt;ul&gt;
      &lt;li&gt;Cloudflare will automatically check the nameserver changes. Once the changes are detected, it will activate your domain (zone) on their platform.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Initiate the Transfer from Google Domains
    &lt;ul&gt;
      &lt;li&gt;In Google Domains, initiate the transfer process. You’ll receive an authorization code (sometimes called an EPP code) to use during the transfer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Complete the Transfer in Cloudflare
    &lt;ul&gt;
      &lt;li&gt;In your Cloudflare account, start the transfer process. Enter the authorization code and update your billing information as required.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure Email Forwarding (Optional)
    &lt;ul&gt;
      &lt;li&gt;If you used Google Domains for email forwarding, you can set up similar forwarding in Cloudflare to ensure uninterrupted email service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Approve the Transfer
    &lt;ul&gt;
      &lt;li&gt;Google Domains will send you an email to confirm the transfer. Approve the transfer to speed up the process, which can otherwise take up to 5 days.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Transfer Completion
    &lt;ul&gt;
      &lt;li&gt;Once the transfer is complete, you’ll receive a confirmation email from Cloudflare. Your domain is now fully managed by Cloudflare.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this we have reached the end of this post, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;If you have any remarks or questions, please don’t hesitate and do drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;As a website owner, understanding how DNS records work, the involved entities in play, their interactions and how to manage the site’s domain settings are important. This article explained these key concepts as part of a migration from the domain registrar Google Domains to Cloudflare and its free DNS managment service.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.bytebytego.com/p/what-happens-when-you-type-a-url&quot;&gt;https://blog.bytebytego.com/p/what-happens-when-you-type-a-url&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.bytebytego.com/p/how-does-the-domain-name-system-dns&quot;&gt;https://blog.bytebytego.com/p/how-does-the-domain-name-system-dns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.bytebytego.com/i/132279282/url-uri-urn-do-you-know-the-differences&quot;&gt;https://blog.bytebytego.com/i/132279282/url-uri-urn-do-you-know-the-differences&lt;/a&gt;&lt;/p&gt;</content><author><name>Firas Esbai</name></author><category term="articles" /><category term="Blogging" /><summary type="html">In this article, I will outline how I migrated from Google Domains, due to its shutdown, to Cloudflare all while explaining some key terms and concepts.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.firasesbai.com/assets/images/articles/21_domain_name_structure_diagram.png" /><media:content medium="image" url="https://www.firasesbai.com/assets/images/articles/21_domain_name_structure_diagram.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>